1. Trend-Following Strategy (Bull Markets)
entry_conditions = (
    current_price > 50_sma and 
    50_sma > 200_sma and 
    rsi(14) < 60 and 
    volume > 1.5 * avg_volume(30)
)
exit_conditions = {
    "stop_loss": entry_price * 0.92,  # 8% stop
    "profit_target": [
        {"price": entry_price * 1.30, "sell_percent": 50},  # Sell 50% at 30% gain
        {"trail_type": "ATR", "multiplier": 1.5}  # Trail remaining with 1.5x ATR
    ]
}

2. Mean-Reversion Strategy (Sideways Markets)
entry_conditions = (
    rsi(14) < 25 and 
    price <= bollinger_lower(20,2) and 
    volume > 2.0 * avg_volume(20) and 
    short_float > 15 and 
    cost_to_borrow > 30
)
exit_conditions = {
    "stop_loss": entry_price * 0.90,  # 10% stop
    "profit_targets": [
        {"condition": "rsi(14) > 55", "action": "full_exit"},
        {"condition": "price >= bollinger_mid(20,2)", "action": "full_exit"}
    ]
}

3. Breakout Strategy (High Volatility)
entry_conditions = (
    catalyst_event == True and  # FDA/contract/merger news
    price > resistance_level and 
    volume > 3.0 * avg_volume(30) and 
    float_shares < 50e6 and  # <50M float
    relative_volume > 3.0
)
exit_conditions = {
    "stop_loss": entry_price * 0.93,  # 7% stop
    "profit_target": [
        {"price": entry_price * 1.40, "sell_percent": 50},
        {"trail_type": "percentage", "threshold": 15}  # 15% trailing stop
    ]
}

4. IPO Fade Strategy (Day 1-5)
entry_conditions = (
    days_since_ipo <= 5 and 
    open_price > ipo_price * 1.50 and 
    pre_market_volume > 1e6 and 
    vwap_divergence > 3.0  # Price > VWAP by 3%
)
exit_conditions = {
    "stop_loss": "pre_market_high * 1.02",
    "profit_target": "ipo_price * 1.25",
    "time_exit": "end_of_day"  # Close position EOD
}

5. Lockup Expiry Strategy (Month 4-6)
entry_conditions = (
    days_to_lockup_expiry <= 10 and 
    price < ipo_price * 0.85 and 
    volume < 0.7 * avg_volume(30) and 
    put_oi_ratio > 1.5  # Put/Call OI ratio
)
exit_conditions = {
    "stop_loss": "entry_price * 0.85",
    "profit_targets": [
        {"price": "ipo_price * 0.95", "sell_percent": 70},
        {"price": "ipo_price * 1.05", "sell_percent": 30}
    ],
    "time_exit": "lockup_expiry + 3"
}

6. Catalyst Scalping Strategy (Intraday)
entry_conditions = (
    catalyst_imminent == True and  # Earnings/FDA within 1hr
    pre_market_gap > 0.05 and  # 5% gap
    volume > 1e6 and 
    price > vwap and 
    time_window = "09:45-10:15 or 15:30-16:00"
)
exit_conditions = {
    "stop_loss": "entry_price * 0.97",
    "profit_target": "entry_price * 1.02",
    "time_exit": "15_minutes_after_entry"
}


Strategy Selection Logic
def select_strategy(vix: float, market_condition: str) -> str:
    if vix < 15:
        return "mean_reversion"
    elif 15 <= vix <= 30:
        return "trend_following" if market_condition == "bull" else "breakout"
    else:  # VIX > 30
        return "ipo_fade" if has_recent_ipos() else "catalyst_scalping"

Position Sizing Algorithm
def calculate_position_size(account_size: float, 
                           entry: float, 
                           stop_loss: float, 
                           strategy_risk: float) -> int:
    """
    strategy_risk: % of capital to risk (0.01 = 1%)
    """
    risk_per_share = entry - stop_loss
    max_dollar_risk = account_size * strategy_risk
    return int(max_dollar_risk / abs(risk_per_share))

# Strategy-specific risk parameters
RISK_PARAMS = {
    "trend_following": 0.02,
    "mean_reversion": 0.01,
    "breakout": 0.015,
    "ipo_fade": 0.03,
    "lockup_expiry": 0.025,
    "catalyst_scalping": 0.01
}

Strategy Performance Monitoring
def evaluate_strategy(performance: dict) -> bool:
    """
    Returns True if strategy should continue
    """
    if performance['win_rate'] < 0.45:
        return False
    if performance['max_drawdown'] > 0.25:
        return False
    if performance['sharpe_ratio'] < 0.5:
        return False
    if performance['trades'] < 20:  # Minimum sample size
        return True
    return performance['profit_factor'] > 1.5

Cross-Strategy Synergy Example
def squeeze_cascade_pair():
    """
    Example combo play: 
    1. Long high-short-float penny stock
    2. Short overvalued recent IPO
    """
    penny_stock = screener.find_high_short_float(
        min_float=15, min_ctb=30, price<5
    )
    ipo_stock = screener.find_overvalued_ipo(
        pop_percent>50, days_since_ipo<10
    )
    
    if penny_stock and ipo_stock:
        long_size = executor.calculate_position_size(penny_stock)
        short_size = executor.calculate_position_size(ipo_stock, short=True)
        
        # Delta-hedge sizing
        hedge_ratio = beta_correlation(penny_stock, ipo_stock)
        adjusted_short_size = int(short_size * hedge_ratio)
        
        return {
            "long": (penny_stock, long_size),
            "short": (ipo_stock, adjusted_short_size)
        }


# Replace your existing strategy_config with this updated version
self.strategy_config = {
    "trend_following": {
        "allocation": (0.20, 0.30),
        "holding_period": (30, 90),
        "stop_loss": 0.08,
        "profit_targets": [(0.25, 0.4), (0.50, 0.4), (1.0, 0.2)],
        "filters": {
            "min_volume": 750_000,
            "min_price": 5.00,
            "max_price": 500.00,
            "min_market_cap": 300_000_000,
            "min_trend_duration": 60,
            "min_adx": 25,
            "sma_condition": "50>200",
            "price_above_sma": 50,
            "min_volume_ratio": 1.2,
            "max_volatility": 0.30,
            "min_volatility": 0.05,
            "days_to_scan": 120,
            "pattern_priority": ["golden_cross", "bullish_ma_stack"]
        },
        "backtest_class": FixedTrendFollowingStrategy
    },
    "mean_reversion": {
        "allocation": (0.15, 0.25),
        "holding_period": (5, 21),
        "stop_loss": 0.12,
        "profit_targets": [(0.15, 0.6), (0.25, 0.4)],
        "filters": {
            "min_volume": 500_000,
            "min_price": 2.00,
            "max_price": 200.00,
            "min_market_cap": 100_000_000,
            "max_rsi": 30,
            "bollinger_band_position": "lower",
            "min_volatility": 0.10,
            "max_volatility": 0.40,
            "days_to_scan": 90,
            "pattern_priority": ["hammer", "doji", "support_bounce"]
        },
        "backtest_class": FixedMeanReversionStrategy
    },
    "breakout": {
        "allocation": (0.15, 0.25),
        "holding_period": (7, 30),
        "stop_loss": 0.07,
        "profit_targets": [(0.15, 0.5), (0.25, 0.3), (0.50, 0.2)],
        "filters": {
            "min_volume": 1_500_000,
            "min_price": 5.00,
            "max_price": 300.00,
            "min_market_cap": 300_000_000,
            "min_volume_ratio": 1.5,
            "consolidation_days": 10,
            "max_consolidation": 0.15,
            "min_volatility": 0.10,
            "max_volatility": 0.50,
            "days_to_scan": 60,
            "pattern_priority": ["breakout", "bullish_engulfing"]
        },
        "backtest_class": FixedBreakoutStrategy
    },
    "ipo_fade": {
        "allocation": (0.10, 0.15),
        "holding_period": (1, 5),
        "stop_loss": 0.05,
        "profit_targets": [(0.08, 1.0)],
        "filters": {
            "max_days_since_ipo": 5,
            "min_opening_pop": 0.50,
            "min_premarket_volume": 1_000_000,
            "vwap_divergence": 0.03,
            "days_to_scan": 5
        },
        "backtest_class": FixedIPOFadeStrategy
    },
    "lockup_expiry": {
        "allocation": (0.10, 0.20),
        "holding_period": (30, 90),
        "stop_loss": 0.25,
        "profit_targets": [(0.30, 0.7), (0.50, 0.3)],
        "filters": {
            "days_to_lockup": 10,
            "max_price_vs_ipo": 0.85,
            "min_volume_decline": 0.30,
            "min_put_oi_ratio": 1.5,
            "days_to_scan": 180
        },
        "backtest_class": FixedLockupExpiryStrategy
    },
    "catalyst_scalping": {
        "allocation": (0.05, 0.10),
        "holding_period": (0, 1),  # Intraday only
        "stop_loss": 0.03,
        "profit_targets": [(0.02, 1.0)],
        "filters": {
            "catalyst_window": 1,  # Hours until catalyst
            "min_premarket_gap": 0.05,
            "min_premarket_volume": 500_000,
            "time_windows": ["09:45-10:15", "15:30-16:00"],
            "min_vwap_deviation": 0.01,
            "days_to_scan": 5
        },
        "backtest_class": FixedCatalystScalpingStrategy
    }
}

# Add these new strategy classes to your code
class FixedTrendFollowingStrategy(Strategy):
    def init(self):
        self.sma50 = self.I(talib.SMA, self.data.Close, 50)
        self.sma200 = self.I(talib.SMA, self.data.Close, 200)
        self.atr = self.I(talib.ATR, self.data.High, self.data.Low, self.data.Close, 14)
        self.adx = self.I(talib.ADX, self.data.High, self.data.Low, self.data.Close, 14)
        
    def next(self):
        price = self.data.Close[-1]
        atr = self.atr[-1]
        
        if not self.position:
            # Entry: Price above SMAs and ADX > 25
            if (price > self.sma50[-1] > self.sma200[-1] and 
                self.adx[-1] > 25):
                self.buy(sl=price - 1.5*atr)
        
        elif self.position:
            # Exit: Trend weakness or profit target
            if (price < self.sma50[-1] or 
                self.adx[-1] < 20 or
                self.position.pl > 0.25):
                self.position.close()

class FixedMeanReversionStrategy(Strategy):
    def init(self):
        self.rsi = self.I(talib.RSI, self.data.Close, 14)
        self.bollinger_lower = self.I(talib.BBANDS, self.data.Close, 20, 2, 2)[2]
        self.atr = self.I(talib.ATR, self.data.High, self.data.Low, self.data.Close, 14)
        
    def next(self):
        price = self.data.Close[-1]
        
        if not self.position:
            # Entry: Oversold conditions
            if (self.rsi[-1] < 30 and 
                price <= self.bollinger_lower[-1] and
                self.data.Volume[-1] > 1.5 * self.data.Volume[-20:].mean()):
                self.buy(sl=price - 2*self.atr[-1])
        
        elif self.position:
            # Exit: RSI > 55 or price reaches mid Bollinger
            bollinger_mid = (self.bollinger_lower[-1] + self.I(talib.BBANDS, self.data.Close, 20, 2, 2)[0][-1]) / 2
            if self.rsi[-1] > 55 or price >= bollinger_mid:
                self.position.close()

class FixedIPOFadeStrategy(Strategy):
    def init(self):
        self.ipo_price = self.data.Open[0]  # First open is IPO price
        self.vwap = self.I(talib.SMA, self.data.Close, 5)  # Simplified VWAP
        
    def next(self):
        price = self.data.Close[-1]
        open_price = self.data.Open[-1]
        
        if not self.position and len(self.data) < 5:  # Only trade first 5 days
            # Entry: If opened >50% above IPO price
            if open_price > self.ipo_price * 1.5:
                # Short with tight stop
                self.sell(sl=open_price * 1.02)
        
        elif self.position and self.position.is_short:
            # Exit: Profit target or end of day
            if (price < self.ipo_price * 1.25 or
                self.data.index[-1].time() >= pd.Timestamp("15:45").time()):
                self.position.close()

class FixedLockupExpiryStrategy(Strategy):
    def init(self):
        self.ipo_price = self.data.Open[0]
        self.lockup_day = 90  # Assuming lockup expires around day 90
        
    def next(self):
        price = self.data.Close[-1]
        
        if not self.position and len(self.data) >= self.lockup_day - 10:
            # Entry: If dropped 25-40% post-lockup announcement
            if price < self.ipo_price * 0.75 and self.data.Volume[-1] < 0.7 * self.data.Volume[-30:].mean():
                self.buy(sl=price * 0.85)
        
        elif self.position:
            # Exit: Price recovery targets
            if (price > self.ipo_price * 0.95 or 
                len(self.data) > self.lockup_day + 10):
                self.position.close()

class FixedCatalystScalpingStrategy(Strategy):
    def init(self):
        self.vwap = self.I(talib.SMA, self.data.Close, 5)  # Simplified VWAP
        self.entry_time = None
        
    def next(self):
        current_time = self.data.index[-1]
        price = self.data.Close[-1]
        vwap = self.vwap[-1]
        
        # Only trade during specified windows
        trade_window = (
            pd.Timestamp("09:45").time() <= current_time.time() <= pd.Timestamp("10:15").time() or
            pd.Timestamp("15:30").time() <= current_time.time() <= pd.Timestamp("16:00").time()
        )
        
        if not self.position and trade_window:
            # Entry: Price above VWAP with volume
            if (price > vwap * 1.01 and 
                self.data.Volume[-1] > 2 * self.data.Volume[-5:].mean()):
                self.entry_time = current_time
                self.buy(sl=price * 0.97)
        
        elif self.position:
            # Time-based exit (15 minutes)
            if (current_time - self.entry_time).seconds >= 900:  # 15 minutes
                self.position.close()
            # Profit target exit
            elif price >= self.position.entry_price * 1.02:
                self.position.close()



unifiedscoring system
class StockScanner:
    # ... (keep existing code until strategy_config)

    def _create_unified_ranking(self):
        """Create a unified ranking across all strategies"""
        if not self.scan_results:
            return []
            
        # Create a dictionary to store best entry per ticker
        ticker_entries = {}
        
        for stock in self.scan_results:
            ticker = stock['ticker']
            current_score = stock['normalized_score']
            
            # Store best entry per ticker
            if ticker not in ticker_entries or current_score > ticker_entries[ticker]['score']:
                # Calculate profitability potential score
                profit_potential = self._calculate_profit_potential(stock)
                
                ticker_entries[ticker] = {
                    'ticker': ticker,
                    'score': current_score,
                    'profit_potential': profit_potential,
                    'combined_score': (current_score * 0.6) + (profit_potential * 0.4),
                    'strategy': stock['strategy'],
                    'price': stock['data']['c'].iloc[-1],
                    'momentum': stock['indicators']['momentum'],
                    'volatility': stock['indicators']['volatility'],
                    'patterns': stock['patterns'],
                    'details': stock['details']
                }
        
        # Convert to list and sort by combined score
        unified_results = list(ticker_entries.values())
        unified_results.sort(key=lambda x: x['combined_score'], reverse=True)
        
        return unified_results

    def _calculate_profit_potential(self, stock):
        """Calculate profit potential score (0-100)"""
        strategy = stock['strategy']
        config = self.strategy_config[strategy]
        indicators = stock['indicators']
        
        # Base potential from strategy type
        strategy_potentials = {
            'trend_following': 0.85,
            'breakout': 0.80,
            'ipo_fade': 0.75,
            'lockup_expiry': 0.70,
            'catalyst_scalping': 0.65,
            'mean_reversion': 0.60
        }
        potential = strategy_potentials.get(strategy, 0.5) * 30
        
        # Momentum component
        min_momentum = config['filters'].get('min_momentum', 0)
        momentum = indicators.get('momentum', 0)
        if min_momentum > 0 and momentum > min_momentum:
            momentum_boost = min((momentum - min_momentum) / min_momentum, 2.0) * 20
            potential += momentum_boost
        
        # Volatility component
        volatility = indicators.get('volatility', 0)
        min_vol = config['filters'].get('min_volatility', 0)
        max_vol = config['filters'].get('max_volatility', float('inf'))
        
        if min_vol < volatility < max_vol:
            vol_score = 20 * (1 - abs(volatility - (min_vol + max_vol)/2) / ((max_vol - min_vol)/2)
            potential += max(0, vol_score)
        
        # Volume component
        volume_ratio = stock['data']['v'].iloc[-1] / indicators.get('volume_ma', 1)
        min_volume_ratio = config['filters'].get('min_volume_ratio', 1.0)
        if volume_ratio > min_volume_ratio:
            volume_boost = min((volume_ratio - min_volume_ratio) / min_volume_ratio, 2.0) * 15
            potential += volume_boost
        
        # Pattern bonus
        pattern_bonus = 0
        priority_patterns = config['filters'].get('pattern_priority', [])
        for pattern in stock['patterns']:
            if pattern in priority_patterns:
                pattern_bonus += 5
        potential += min(pattern_bonus, 15)
        
        return min(potential, 100)

    def print_unified_ranking(self, top_n=10):
        """Print unified ranking of top stocks"""
        if not self.scan_results:
            self.debugger.warning("No qualifying stocks found")
            return
            
        unified_ranking = self._create_unified_ranking()
        top_stocks = unified_ranking[:top_n]
        
        self.debugger.section(f"Top {top_n} Stocks by Profit Potential")
        
        # Create table rows
        rows = []
        for i, stock in enumerate(top_stocks, 1):
            rows.append([
                f"#{i}",
                stock['ticker'],
                f"${stock['price']:.2f}",
                stock['strategy'].upper(),
                f"{stock['combined_score']:.1f}",
                f"{stock['score']:.1f}",
                f"{stock['profit_potential']:.1f}",
                f"{stock['momentum']:.1f}%",
                ", ".join(stock['patterns'])
            ])
        
        # Print table
        self.debugger.table(
            ["Rank", "Ticker", "Price", "Strategy", "Combined", "Strat Score", "Profit Pot", "Momentum", "Patterns"],
            rows,
            col_widths=[5, 8, 10, 15, 10, 10, 10, 12, 25]
        )
        
        # Print details for top 5
        self.debugger.section("Top 5 Profit Potential Details")
        for i, stock in enumerate(top_stocks[:5], 1):
            self.debugger.info(f"\n#{i} {stock['ticker']} ({stock['strategy']})")
            self.debugger.info(f"  - Combined Score: {stock['combined_score']:.1f}")
            self.debugger.info(f"  - Strategy Score: {stock['score']:.1f}")
            self.debugger.info(f"  - Profit Potential: {stock['profit_potential']:.1f}/100")
            self.debugger.info(f"  - Price: ${stock['price']:.2f}")
            self.debugger.info(f"  - Momentum: {stock['momentum']:.1f}%")
            self.debugger.info(f"  - Volatility: {stock['volatility']:.2f}%")
            self.debugger.info(f"  - Patterns: {', '.join(stock['patterns'])}")
            
            # Show strategy-specific profit targets
            config = self.strategy_config[stock['strategy']]
            targets = ", ".join([f"{t[0]*100:.0f}% ({t[1]*100:.0f}%)" for t in config['profit_targets']])
            self.debugger.info(f"  - Profit Targets: {targets}")
            self.debugger.info(f"  - Stop Loss: {config['stop_loss']*100:.1f}%")
            
            # Calculate risk/reward ratio
            avg_return = sum(t[0] * t[1] for t in config['profit_targets'])
            risk_reward = avg_return / config['stop_loss']
            self.debugger.info(f"  - Risk/Reward: 1:{risk_reward:.2f}")

    # ... (rest of existing code)

# Then in scan_tickers method, after scanning:
    async def scan_tickers(self):
        # ... (existing scanning code)
        
        # Create unified ranking
        self.print_unified_ranking(top_n=5)
        
        # Backtest top 3
        await self._backtest_top_candidates(n_per_strategy=3)

# Modify _backtest_top_candidates to use unified ranking:
    async def _backtest_top_candidates(self, n_per_strategy=3):
        if not self.scan_results:
            return
            
        # Get top stocks from unified ranking
        unified_ranking = self._create_unified_ranking()
        top_stocks = unified_ranking[:n_per_strategy]
        
        for stock in top_stocks:
            self.debugger.info(f"\nBacktesting {stock['ticker']} ({stock['strategy']})...")
            await run_backtest({
                'ticker': stock['ticker'],
                'strategy': stock['strategy'],
                'data': stock['data'],
                'indicators': stock['indicators'],
                'patterns': stock['patterns'],
                'details': stock['details']
            }, self.debugger)